##Selection-radomized		O(n)
Find the k-th smallest element.

[1]
Worst case if balanced split: T(n) <= T(3n/4) + dn
Worst case if unbalanced split: T(n) <= T(n-1) + dn ~ T(n) + dn
Each split has a 50% chance of being balanced
T(n) <= 1/2 · (T(3n/4)+dn) + 1/2 · (T(n)+dn)
1/2 · T(n) <= 1/2 · T(3n/4) + dn
T(n) <= T(3n/4) + 2dn = θ(n)
2dn · 1/(1-3/4) = 8dn		#sum of proportional series

[2]
Define Xk {1, if RandPartition gives k vs n-k-1 split; 0, otherwise}
T(n) <= θ(n) + one of {T(max{0,n-1}; T(max{1,n}); ... T(max{n-1,0})} = θ(n) + Σ{k=0}^{n-1} Xk·T(max{k, n-k-1})
E[T(n)] = E[θ(n) + Σ{k=0}^{n-1} Xk·T(max{k, n-k-1})]
= E[θ(n)] + E[Σ{k=0}^{n-1} Xk·T(max{k, n-k-1})]
= θ(n) + Σ{k=0}^{n-1} E[Xk] · E[T(max{k, n-k-1})]
= θ(n) + Σ{k=0}^{n-1} E[1/n] · E[T(max{k, n-k-1})]
= θ(n) + 2/n · Σ{k=n/2}^{n-1} E[T(k)]
<= θ(n) + 2/n · Σ{k=n/2}^{n-1} ck
= θ(n) + 2c/n · Σ{k=n/2}^{n-1} k
<= θ(n) + 2/n · 3n^2/8
= θ(n) + 3cn/4 = cn - (cn/4 - dn) if c>4d
E[T(n)] <= 4dn

##Quicksort		stable sort
T(n) = θ(n) + T(j-1) + T(n-j)

[1]
Lucky(n) = 2Unlucky(n/2) + dn
Unlucky(n) = Lucky(n-1) + dn
Lucky(n) = 2[Lucky(n/2-1) + dn/2] + dn
Lucky(n) <= 2Lucky(n/2) + 2dn = θ(nlogn)

[2]
Worst case if balanced split: T(n) <= T(3n/4) + T(n/4) + dn
Worst case if unbalanced split: T(n) <= T(n-1) + T(0) + dn ~ T(n) + dn
Each split has a 50% chance of being balanced
T(n) <= 1/2 · (T(3n/4)+T(n/4)+dn) + 1/2 · (T(n)+dn)
1/2 · T(n) <= dn + 1/2 · (T(3n/4) + T(n/4))
T(n) <= T(3n/4) + T(n/4) + 2dn = θ(nlogn)

[3]
define Xk = {1, if a piviot partition array into k & n-k-1; 0, Otherwise}
E[Xk] = E[θ(n) + {T(0)+T(n-1); T(1)+T(n-2); ... T(n-1)+T(0)}]
= E[θ(n) + Σ{k=0}^{n-1} Xk · (T(k)+T(n-k-1))]
= E[θ(n)] + Σ{k=0}^{n-1} E[Xk · (T(k)+T(n-k-1))]
= θ(n) + Σ{k=0}^{n-1} 1/n · E[(T(k)+T(n-k-1))]
= θ(n) + 1/n · Σ{k=0}^{n-1}E[(T(k)] + 1/n · Σ{k=0}^{n-1}[T(n-k-1)]
= θ(n) + 2/n · Σ{k=0}^{n-1}E[(T(k)]
= θ(n) + 2/n(E[T(0)]+E[T(1)]) + 2/n · Σ{k=2}^{n-1}E[(T(k)]
= θ(n) + 2/n · Σ{k=2}^{n-1}E[(T(k)]
<= θ(n) + 2/n · Σ{k=2}^{n-1} aklogk		#guess E[T(n)] <= anlogn for k<n
<= θ(n) + 2a/n · (n^2·logn/2 - n^2/8)
= anlogn - (an/4 - cn) if a>4c

[4] define Xij = {1, if Zi ever compared to Zj; 0, Otherwise}
X = total #comparisons = Σ{i=1}^{n-1} Σ{j=i+1}^{n} E[Xij]
E[i,j] = 2/(j-i+1)
-> ΣE[i, j] = O(nlogn)

##Binary search tree
seach/insert/delete		O(depth)		#delete need to find the successor
instant delete			O(1)
any algorithm producing tree shape all cost Ω(nlogn) time

BSTsort ~ quicksort: exactly same comparison but in different orders
randomized version BST
BST build			θ(nlogn)
insertion			θ(logn)

E[depth] = θ(logn) -> balanced BST? No
average_depth_of_unbalanced_BST < 1/n · (n·logn + √n(√n+logn)) = O(logn)

Expected height of randomly built BST
H(n) = 1 + max{H(left subtree), H(right subtree)}			#1 is for the height of root node
= 1 + max{H(k), H(n-k-1)} for 0<=k<=n-1
if n/4 < k < 3n/4
H(n) <= 1+H(3n/4)
else H(n) <= H(n-1) + 1 ~ H(n) + 1
E[H(n)] = 1/2 · E[1+H(3n/4)] + 1/2 · E[H(n) + 1]
E[H(n)] <= 2 + E[H(3n/4)] = O(logn)

##Red-black tree
dynamic BST -> maintain O(log(n)) time cost in update and search operations.
any root-leaf path of size k must have >=k/2 black nodes or it will be unbalanced.
T --contraction--> T' which is perfectly balanced
#leaves in T： n+1 = size(T) + 1
#leaves in T': same
height(T')<=log(n+1)
reinsert red nodes into T' => height(T) = 2log(n+1) ~ 2logn

rotation in each level cost O(1) time

Insertion	O(logn)

algo
x is at the left subtree the g(x)
case1: p(x)&uncle(x) is red && g(x) is black, x is left or right child		#recolor uncle(x), p(x) and g(x); x=g(x)
case2: p(x) is red && unlce(x)&g(x) is black, x is right child			#rotation of x->p(x); x=p(x); p(x)=x; then case3
case3: p(x) is red && unlce(x)&g(x) is black, x is left child			#rotation of p(x)->g(x); recolor p(x) and g(x); g(x)=p(p(x))

##Augmenting BST
If static selection, update will take θ(n) each time, query will take O(1) each time.
In dynamic selection, query/insertion/deleteion operation could only take O(nlogn) + O(logn)		

#first O(nlogn) is preprocess, then O(logn) for each time update and query operation.

Dynamic makes update operation quicker

Built of balanced BST		θ(nlogn)
Two ways of storing the size of subtree
[1] Compute after building by postorder walk
[2] Update the size value when inserting + rebalance

##Dynamic Programming
See more in LeetCode
[LCS]
class Solution(object):
    def longestCommonSubsequence(self, text1, text2):
        """
        :type text1: str
        :type text2: str
        :rtype: int
        """
        #https://www.youtube.com/watch?v=NnD96abizww
        #     a b c d e
        #   0 0 0 0 0 0
        # a 0 1 1 1 1 1
        # c 0 1 1 2 2 2
        # e 0 1 1 2 2 3

        score = 0
        init = 0
        m = len(text1)
        n = len(text2)
        col = n + 1
        l = [init-init for init in range(n+2)]
        for x in range(m):
            for y in range(n):
                location_index = col * (x + 1) + y + 1
                if text1[x] == text2[y]:
                    score = l[location_index - col -1] + 1
                    l.append(score)     #l[n*(x-1)+y]
                else:
                    score = max(l[location_index - 1], l[location_index - col])
                    l.append(score)
            l.append(0)
        return score

    def LCS_with_linear_space(self, text1, text2):
        if len(text1) == 0 or len(text2) == 0:
            return 0

        res = ''
        mem_1 = [0] * (len(text2) + 1)
        mem_2 = [0] * (len(text2) + 1)
        for i in range(len(text1)):
            for j in range(len(text2)):
                if text1[i] == text2[j]:
                    res = res + text1[i]
                    mem_2[j + 1] = mem_1[j] + 1
                else:
                    mem_2[j + 1] = max(mem_2[j], mem_1[j + 1])
            mem_1 = mem_2
            mem_2 = [0] * (len(text2) + 1)
        return res
        return mem_1[-1]

[LIS]
class Solution(object):
    def lengthOfLIS(self, nums):
        #DP
        #https://www.youtube.com/watch?v=S9oUiVYEq7E
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        dp = [1]*len(nums)
        for i in range (1, len(nums)):
            for j in range(i):
                if nums[i] >nums[j]:
                    dp[i] = max(dp[i], dp[j]+1)
        # this step will choose the element j which is less than element i
        # and the length of sequence which is tailed with element j is used to calculate the length of the new sequence tailed with element i
        return max(dp)

    def lengthOfLIS_BS(self, nums):
        #Binary Search
        #https://blog.csdn.net/wbin233/article/details/77570070
        tails = [0] * len(nums)
        size = 0
        for x in nums:
            i, j = 0, size
            while i != j:
                m = (i + j) / 2
                if tails[m] < x:
                    i = m + 1
                else:
                    j = m
            tails[i] = x
            size = max(i + 1, size)
        return size

*sort + LCS

[Rod cutting]
